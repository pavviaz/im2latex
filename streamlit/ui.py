import time
import json
import requests

import streamlit as st
import streamlit_ace as st_ace
from streamlit_lottie import st_lottie


API_PDF = "http://127.0.0.1:8000/pdf"
API_STATUS = "http://127.0.0.1:8000/status"


st.set_page_config(page_title="–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä", page_icon="üìÑ")

# Custom CSS for styling
st.markdown(
    """
    <style>
    .upload-area {
        border: 2px dashed #cccccc;
        padding: 20px;
        text-align: center;
        transition: background-color 0.3s ease;
    }
    .upload-area:hover {
        background-color: #f0f0f0;
    }
    .status-message {
        font-size: 1.2em;
        margin-top: 20px;
    }
    .editor-container {
        margin-top: 20px;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

st.title("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä")

# –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
result_format = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", ("md", "latex"))

# –ï–¥–∏–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
uploaded_files = st.file_uploader(
    "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PNG, JPG)",
    type=["pdf", "png", "jpg"],
    accept_multiple_files=True,
    help="–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PNG, JPG)",
)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
def valid_files(files):
    if len(files) == 1 and files[0].type == "application/pdf":
        return True
    elif all(file.type in ["image/png", "image/jpeg"] for file in files):
        return True
    else:
        return False


if uploaded_files and not valid_files(uploaded_files):
    st.error(
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏–±–æ –æ–¥–∏–Ω PDF —Ñ–∞–π–ª, –ª–∏–±–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (PNG, JPG)."
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Lottie-–∞–Ω–∏–º–∞—Ü–∏–π –∏–∑ URL –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
def load_lottiefile(filepath: str):
    with open(filepath, "r") as f:
        return json.load(f)


# –ó–∞–≥—Ä—É–∑–∫–∞ Lottie-–∞–Ω–∏–º–∞—Ü–∏–∏
lottie_spinner = load_lottiefile("static/lottie_anim.json")

if "s" not in st.session_state:
    st.session_state.s = requests.Session()

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
if uploaded_files and valid_files(uploaded_files) and st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä"):
    files = [("pdf_file", (file.name, file, file.type)) for file in uploaded_files]
    r = st.session_state.s.post(
        url=API_PDF, data={"decode_type": result_format}, files=files
    )

    if r.status_code == 201:
        st.success("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Lottie-–∞–Ω–∏–º–∞—Ü–∏–∏
        with st.echo():
            st_lottie(lottie_spinner, height=600, width=600)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
            status_response = -1
            while status_response != 200:
                status_response = st.session_state.s.get(API_STATUS)
                status = status_response.json().get("msg")
                if status_response.status_code == 200:
                    st.success(status)
                    break
                # elif status_response.status_code == 202:
                #     st.warning(status)
                # elif status_response.status_code == 500:
                #     st.error(status)
                time.sleep(2)

        # –†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞
        edited_text = st_ace.st_ace(
            value=status_response.json()["content"],
            language="text",
            theme="monokai",
            key="editor",
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"):
            with open("edited_text.txt", "w") as f:
                f.write(edited_text)
            st.success("–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤")
